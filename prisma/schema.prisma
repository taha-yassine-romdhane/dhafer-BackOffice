datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// schema.prisma
model Product {
  id             Int            @id @default(autoincrement())
  name           String
  description    String
  price          Float
  salePrice      Float?
  category       String
  sizes          String[]
  collaborateur  String?
  // Display control fields
  showInHome     Boolean        @default(false)
  showInPromo    Boolean        @default(false)
  showInTopSales Boolean        @default(false)
  priority       Int            @default(0)      // For ordering in each section
  // Existing relations
  colorVariants  ColorVariant[]
  orderItems     OrderItem[]
  stocks         Stock[]        @relation("ProductStock")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Optional: Add a view counter for analytics
  viewCount      Int            @default(0)
  orderCount     Int            @default(0)      // To track top selling products
}

model ColorVariant {
  id        Int            @id @default(autoincrement())
  color     String
  images    ProductImage[]
  product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  stocks    Stock[]        @relation("ColorVariantStock")
  orderItems OrderItem[]   @relation("ColorVariantOrderItems")
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([productId])
}

model ProductImage {
  id             Int          @id @default(autoincrement())
  url            String   
  isMain         Boolean      @default(false)
  position       String?      // e.g., "front", "back", "side"
  colorVariantId Int
  colorVariant   ColorVariant @relation(fields: [colorVariantId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([colorVariantId])
}

model User {
  id              Int       @id @default(autoincrement())
  username        String    @unique
  email           String    @unique
  password        String
  createdAt       DateTime  @default(now())
  isSubscribed    Boolean   @default(false)
  fidelityPoints  Int       @default(0)
  orders          Order[]
  contacts        Contact[]
}

model Order {
  id           Int         @id @default(autoincrement())
  customerName String
  phoneNumber  String
  address      String
  totalAmount  Float
  status       OrderStatus @default(PENDING)
  items        OrderItem[]
  userId       Int?        // Make it optional initially
  user         User?       @relation(fields: [userId], references: [id]) // Make it optional initially
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model OrderItem {
  id            Int          @id @default(autoincrement())
  orderId       Int
  productId     Int
  quantity      Int
  size          String?
  color         String?
  price         Float
  order         Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product       Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  colorVariant  ColorVariant @relation("ColorVariantOrderItems", fields: [colorVariantId], references: [id], onDelete: Cascade)
  colorVariantId Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([orderId])
  @@index([productId])
  @@index([colorVariantId])
}

model Stock {
  id        Int          @id @default(autoincrement())
  location  String       // "monastir", "tunis", "sfax", "online"
  quantity  Int          @default(0)
  product   Product      @relation("ProductStock", fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  size      String
  colorId   Int
  color     ColorVariant @relation("ColorVariantStock", fields: [colorId], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([productId, location, size, colorId])
}

model Contact {
  id        String   @id @default(cuid())
  name      String?  // Optional for logged-in users
  email     String?  // Optional for logged-in users
  phone     String?  // Optional for logged-in users
  message   String   @db.Text
  userId    Int?     // Reference to User if logged in
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}
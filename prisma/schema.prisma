datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id             Int               @id @default(autoincrement())
  name           String
  description    String
  price          Float
  salePrice      Float?
  // Replaced hardcoded fields with relations
  categories     ProductCategory[] // Relation to categories
  sizes          ProductSize[] // Relation to sizes
  collaborateur  String?
  // Display control fields
  showInHome     Boolean           @default(false)
  showInPromo    Boolean           @default(false)
  showInTopSales Boolean           @default(false)
  priority       Int               @default(0) // For ordering in each section
  // Existing relations
  colorVariants  ColorVariant[]
  orderItems     OrderItem[]
  stocks         Stock[]           @relation("ProductStock")
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Optional: Add a view counter for analytics
  viewCount  Int @default(0)
  orderCount Int @default(0) // To track top selling products
}

model ColorVariant {
  id         Int            @id @default(autoincrement())
  color      String
  images     ProductImage[]
  product    Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  stocks     Stock[]        @relation("ColorVariantStock")
  orderItems OrderItem[]    @relation("ColorVariantOrderItems")
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@index([productId])
}

model ProductImage {
  id             Int          @id @default(autoincrement())
  url            String
  isMain         Boolean      @default(false)
  position       String? // e.g., "front", "back", "side"
  colorVariantId Int
  colorVariant   ColorVariant @relation(fields: [colorVariantId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([colorVariantId])
}

model User {
  id             Int                  @id @default(autoincrement())
  username       String               @unique
  email          String               @unique
  password       String
  createdAt      DateTime             @default(now())
  isSubscribed   Boolean              @default(false)
  fidelityPoints Int                  @default(0)
  orders         Order[]
  contacts       Contact[]
  resetTokens    PasswordResetToken[]
}

model Order {
  id           Int         @id @default(autoincrement())
  customerName String
  phoneNumber  String
  address      String
  totalAmount  Float
  status       OrderStatus @default(PENDING)
  items        OrderItem[]
  userId       Int? // Make it optional initially
  user         User?       @relation(fields: [userId], references: [id]) // Make it optional initially
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model OrderItem {
  id             Int          @id @default(autoincrement())
  orderId        Int
  productId      Int
  quantity       Int
  // Changed from String? to relation with Size model
  sizeId         Int?
  size           Size?        @relation(fields: [sizeId], references: [id])
  color          String? // Keeping this for backward compatibility
  price          Float
  order          Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product        Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  colorVariant   ColorVariant @relation("ColorVariantOrderItems", fields: [colorVariantId], references: [id], onDelete: Cascade)
  colorVariantId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([orderId])
  @@index([productId])
  @@index([colorVariantId])
  @@index([sizeId])
}

model Stock {
  id            Int          @id @default(autoincrement())
  // Location-specific stock status
  inStockJammel Boolean      @default(true)
  inStockTunis  Boolean      @default(true)
  inStockSousse Boolean      @default(true)
  inStockOnline Boolean      @default(true)
  product       Product      @relation("ProductStock", fields: [productId], references: [id], onDelete: Cascade)
  productId     Int
  // Changed from String to relation with Size model
  sizeId        Int
  size          Size         @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  colorId       Int
  color         ColorVariant @relation("ColorVariantStock", fields: [colorId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@unique([productId, sizeId, colorId])
  @@index([sizeId])
}

model Contact {
  id        String   @id @default(cuid())
  name      String? // Optional for logged-in users
  email     String? // Optional for logged-in users
  phone     String? // Optional for logged-in users
  message   String   @db.Text
  userId    Int? // Reference to User if logged in
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

// New models for dynamic categories and sizes
model Category {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  group       CategoryGroup     @default(FEMME) // Femme, Enfant, or Accessoire
  products    ProductCategory[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@unique([name, group]) // Allow same name in different groups
}

enum CategoryGroup {
  FEMME
  ENFANT
  ACCESSOIRE
}

model Size {
  id          Int           @id @default(autoincrement())
  value       String        @unique // e.g., "S", "M", "L", "XL", "42", "44", etc.
  description String? // Optional description for the size
  products    ProductSize[]
  stocks      Stock[]
  orderItems  OrderItem[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// Junction tables for many-to-many relationships
model ProductCategory {
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  createdAt  DateTime @default(now())

  @@id([productId, categoryId])
  @@index([productId])
  @@index([categoryId])
}

model ProductSize {
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  size      Size     @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  sizeId    Int
  createdAt DateTime @default(now())

  @@id([productId, sizeId])
  @@index([productId])
  @@index([sizeId])
}

// Model for carousel images on the home page
model CarouselImage {
  id          Int      @id @default(autoincrement())
  url         String   // URL of the image
  title       String?  // Optional title text
  description String?  // Optional description text
  buttonText  String?  // Optional button text
  buttonLink  String?  // Optional button link
  section     String   @default("about") // Section: about, topvente1, topvente2
  filename    String?  // Original filename
  position    Int      @default(0) // Order in the carousel
  isActive    Boolean  @default(true) // Whether to show in the carousel
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Model for SMS subscribers
model SMSSubscriber {
  id          Int      @id @default(autoincrement())
  phoneNumber String   @unique // The phone number to send SMS to
  name        String?  // Optional name for reference
  isActive    Boolean  @default(true) // Whether subscriber is active
  source      String?  // Where this subscriber came from (form, order, etc.)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Model for stock notifications when products are back in stock
model StockNotification {
  id          Int      @id @default(autoincrement())
  phoneNumber String   // Phone number to notify
  productId   Int      // ID of the product
  productName String   // Name of the product for reference
  size        String   // Size requested
  color       String   // Color requested
  isNotified  Boolean  @default(false) // Whether notification has been sent
  notifiedAt  DateTime? // When the notification was sent
  createdAt   DateTime @default(now())
  
  @@index([phoneNumber])
  @@index([productId])
  @@index([isNotified])
}